---
title: OpenGL from Haskell
tags: haskell, opengl
---

The following is my translation/adaptation of
[[http://www.opengl-tutorial.org/beginners-tutorials/tutorial-2-the-first-triangle/][tutorial
#2]] at [[http://www.opengl-tutorial.org]]. It draws a single red
triangle on the screen with a dark blue background. It takes quite a bit
of boilerplate code just to get something on the screen!

My version uses the code from
[[https://github.com/YPares/Haskell-OpenGL3.1-Tutos]], but does not use
=Control.Applicative= and also does not put the shaders containing GLSL
in a separate text file. Everything is self-contained in one file, and
it only uses the =PackageImports= and =RecordWildCards= GHC extensions.
The =PackageImports= is only necessary if you have both
[[http://hackage.haskell.org/package/GLFW][GLFW]] and
[[http://hackage.haskell.org/package/GLFW-b][GLFW-b]] Hackage packages
installed in your system (as they have a name clash of
=Graphics.UI.GLFW=, you need to disambiguate this import by specifying
the package name). The =RecordWildCards= extension is pretty standard
and exists purely for syntactic sugar (no type-level hoops and such) ---
if you don't know about it you should google it.

I went ahead and added type signatures for all top-level functions ---
something that many Haskell tutorial writers hate doing for some
strange, unknown reason.[fn:1] Also, I ran the code through
=ghc --make -Wall= and silenced all warnings.

I hereby release it into the Public Domain. From what I can tell,
YPares's code doesn't have a license... I think this should be OK.

- i opengl/triangle.hs

[fn:1] Seriously, why do so many Haskell tutorials omit function type
       signatures?
