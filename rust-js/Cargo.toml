[package]
name = "rust-js"
version = "0.1.0"
authors = ["Linus Arver <linusarver@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
fixedbitset = "0.3.1"
wasm-bindgen = "0.2.63"


# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

# Needed by
# https://rustwasm.github.io/docs/wasm-bindgen/examples/without-a-bundler.html,
# which we use because we use "--target web" to generate JS from Rust.
[dependencies.web-sys]
version = "0.3.4"
# These "features" are basically imports of various parts of the web_sys crate,
# found at https://rustwasm.github.io/wasm-bindgen/api/web_sys/. Turning on
# various features allows us to in turn access different parts of a Web API
# (what JavaScript typically controls, to manipulate the DOM).
features = [
  'CanvasRenderingContext2d', # See https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.CanvasRenderingContext2d.html and https://rustwasm.github.io/wasm-bindgen/examples/2d-canvas.html.
  'CssStyleDeclaration',
  'Document',
  'DomRect',
  'Element',
  'HtmlCanvasElement',
  'HtmlCollection',
  'HtmlDivElement',
  'HtmlElement',
  'MouseEvent',
  'Node',
  'Window',
]
